<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- Method Documentation URL: https://api.insight.ly/v2.1/Help/Api/POST-Contacts -->
<template name="createContact" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="salutation" description="Salutation for the Contact (Mr/Mrs/etc)." />
   <parameter name="firstName" description="First/Given Name of the Contact." />
   <parameter name="lastName" description="Last/Family/Surname of the Contact." />
   <parameter name="background" description="Additional background information (notes, bio etc)." />
   <parameter name="imageUrl" description="Url of the Image for the Contact." />
   <parameter name="defaultLinkedOrganisation" description="Unique key of the Organisation linked to the Contact, must be a valid ORGANISATION_ID" />
   <parameter name="ownerUserId" description="User ID of the Contact Owner." />
   <parameter name="visibleTo"
      description="This field can have one of the following values: 'Everyone' (Default), 'Owner', 'Team', or 'Individuals'." />
   <parameter name="visibleTeamId"
      description="If VISIBLE_TO is 'Team', then this should be a Team ID, which must be a valid TEAM_ID record locator." />
   <parameter name="visibleUserIds" description="If VISIBLE_TO is 'Individuals', then this should be a comma-separated list of User IDs." />
   <parameter name="addresses" description="Set of Addresses attached to the Contact." />
   <parameter name="dates" description="Set of Dates to Remember attached to the Contact." />
   <parameter name="tags" description="Set of Tags attached to the Contact." />
   <parameter name="links" description="Set of Links attached to the Contact." />
   <parameter name="customFields" description="Set of Custom Fields attached to the Contact." />
   <parameter name="emailLinks" description="Set of Email Links attached to the Contact." />
   <parameter name="contactLinks" description="Set of Links to other Contacts attached to the Contact." />
   <parameter name="contactInfos" description="Set of Contact Infos attached to the Contact." />
   <sequence>
      <property name="uri.var.salutation" expression="$func:salutation" />
      <property name="uri.var.firstName" expression="$func:firstName" />
      <property name="uri.var.lastName" expression="$func:lastName" />
      <property name="uri.var.background" expression="$func:background" />
      <property name="uri.var.imageUrl" expression="$func:imageUrl" />
      <property name="uri.var.defaultLinkedOrganisation" expression="$func:defaultLinkedOrganisation" />
      <property name="uri.var.ownerUserId" expression="$func:ownerUserId" />
      <property name="uri.var.visibleTo" expression="$func:visibleTo" />
      <property name="uri.var.visibleTeamId" expression="$func:visibleTeamId" />
      <property name="uri.var.visibleUserIds" expression="$func:visibleUserIds" />
      <property name="uri.var.addresses" expression="$func:addresses" />
      <property name="uri.var.dates" expression="$func:dates" />
      <property name="uri.var.tags" expression="$func:tags" />
      <property name="uri.var.links" expression="$func:links" />
      <property name="uri.var.customFields" expression="$func:customFields" />
      <property name="uri.var.emailLinks" expression="$func:emailLinks" />
      <property name="uri.var.contactLinks" expression="$func:contactLinks" />
      <property name="uri.var.contactInfos" expression="$func:contactInfos" />
      <!-- If user sends null for these parameters then set empty string -->
      <filter xpath="get-property('uri.var.salutation') = 'null'">
         <then>
            <property name="uri.var.salutation" value="" />
         </then>
      </filter>
      <filter xpath="get-property('uri.var.firstName') = 'null'">
         <then>
            <property name="uri.var.firstName" value="" />
         </then>
      </filter>
      <filter xpath="get-property('uri.var.lastName') = 'null'">
         <then>
            <property name="uri.var.lastName" value="" />
         </then>
      </filter>
      <filter xpath="get-property('uri.var.background') = 'null'">
         <then>
            <property name="uri.var.background" value="" />
         </then>
      </filter>
      <filter xpath="get-property('uri.var.defaultLinkedOrganisation') = 'null'">
         <then>
            <property name="uri.var.defaultLinkedOrganisation" value="" />
         </then>
      </filter>
      <filter xpath="get-property('uri.var.visibleTeamId') = 'null'">
         <then>
            <property name="uri.var.visibleTeamId" value="" />
         </then>
      </filter>
      <filter xpath="get-property('uri.var.ownerUserId') = 'null'">
         <then>
            <property name="uri.var.ownerUserId" value="" />
         </then>
      </filter>
      <!-- If user skips sending the array type parameters, set it as empty array -->
      <filter source="boolean(get-property('uri.var.addresses'))" regex="false">
         <then>
            <property name="uri.var.addresses" value="[]" />
         </then>
      </filter>
      <filter source="boolean(get-property('uri.var.dates'))" regex="false">
         <then>
            <property name="uri.var.dates" value="[]" />
         </then>
      </filter>
      <filter source="boolean(get-property('uri.var.tags'))" regex="false">
         <then>
            <property name="uri.var.tags" value="[]" />
         </then>
      </filter>
      <filter source="boolean(get-property('uri.var.links'))" regex="false">
         <then>
            <property name="uri.var.links" value="[]" />
         </then>
      </filter>
      <filter source="boolean(get-property('uri.var.customFields'))" regex="false">
         <then>
            <property name="uri.var.customFields" value="[]" />
         </then>
      </filter>
      <filter source="boolean(get-property('uri.var.emailLinks'))" regex="false">
         <then>
            <property name="uri.var.emailLinks" value="[]" />
         </then>
      </filter>
      <filter source="boolean(get-property('uri.var.contactLinks'))" regex="false">
         <then>
            <property name="uri.var.contactLinks" value="[]" />
         </then>
      </filter>
      <filter source="boolean(get-property('uri.var.contactInfos'))" regex="false">
         <then>
            <property name="uri.var.contactInfos" value="[]" />
         </then>
      </filter>
      <!-- Owner User ID is added to the payload only if the user sends a non-empty value for it. It is done this way as 
         the API doesn't accept an empty value for OWNER_USER_ID. -->
      <filter source="boolean(get-property('uri.var.ownerUserId'))" regex="true">
         <then>
            <property name="uri.var.ownerUserId"
               expression="fn:concat(',&quot;OWNER_USER_ID&quot;: &quot;', get-property('uri.var.ownerUserId'), '&quot;')" />
         </then>
      </filter>
      <!-- If the user has not provided the ownerUserId then the Payload should not have the corresponding key. -->
      <payloadFactory media-type="json">
         <format>
            {
            "SALUTATION": "$1",
            "FIRST_NAME": "$2",
            "LAST_NAME": "$3",
            "BACKGROUND": "$4",
            "IMAGE_URL": "$5",
            "DEFAULT_LINKED_ORGANISATION": "$6",
            "VISIBLE_TO": "$7",
            "VISIBLE_TEAM_ID": "$8",
            "VISIBLE_USER_IDS": "$9",
            "CUSTOMFIELDS": $10 ,
            "ADDRESSES": $11,
            "CONTACTINFOS": $12,
            "DATES": $13,
            "TAGS":$14,
            "LINKS": $15,
            "CONTACTLINKS": $16,
            "EMAILLINKS": $17
            $18
            }
         </format>
         <args>
            <arg expression="get-property('uri.var.salutation')" />
            <arg expression="get-property('uri.var.firstName')" />
            <arg expression="get-property('uri.var.lastName')" />
            <arg expression="get-property('uri.var.background')" />
            <arg expression="get-property('uri.var.imageUrl')" />
            <arg expression="get-property('uri.var.defaultLinkedOrganisation')" />
            <arg expression="get-property('uri.var.visibleTo')" />
            <arg expression="get-property('uri.var.visibleTeamId')" />
            <arg expression="get-property('uri.var.visibleUserIds')" />
            <arg expression="get-property('uri.var.customFields')" />
            <arg expression="get-property('uri.var.addresses')" />
            <arg expression="get-property('uri.var.contactInfos')" />
            <arg expression="get-property('uri.var.dates')" />
            <arg expression="get-property('uri.var.tags')" />
            <arg expression="get-property('uri.var.links')" />
            <arg expression="get-property('uri.var.contactLinks')" />
            <arg expression="get-property('uri.var.emailLinks')" />
            <arg expression="get-property('uri.var.ownerUserId')" />
         </args>
      </payloadFactory>
      <call>
         <endpoint>
            <http method="post" uri-template="{uri.var.apiUrl}/Contacts" />
         </endpoint>
      </call>
      <!-- Remove response custom header information -->
      <header name="Vary" scope="transport" action="remove" />
      <header name="Expires" scope="transport" action="remove" />
      <header name="Pragma" scope="transport" action="remove" />
      <header name="Cache-Control" scope="transport" action="remove" />
   </sequence>
</template>