<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- API Document URL https://api.proworkflow.net/?calls -->
<template name="listCompanies" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="fields"
      description="An array of api fields to be returned in the response, if not specified code,name and type will be returned." />
   <parameter name="apiFields"
      description="The apiFields filters the response based on the API fields values. Provide an API Field ID and String separated by a comma. Multiple API Field IDs and String pairs can be provided by separating them two pipe characters. E.g. 2,Europe||3,Industrial||3,Commercial." />
   <parameter name="apiFieldsMode"
      description="The apiFieldsMode specifies the Mode used for the apiFields parameter. Possible values are 'any' and 'all'. Defaults to 'any'." />
   <parameter name="divisionId"
      description="The division identifier specifies the Companies under the specific division to be returned." />
   <parameter name="idList"
      description="An array of company Identifiers, Companies with at least one of the specified Company ID/s will be returned." />
   <parameter name="idFrom" description="Companies with ID greater than or equal to this value will be returned." />
   <parameter name="idTo" description="Companies with ID less than or equal to this value will be returned." />
   <parameter name="lastModifiedFrom"
      description="Companies added/edited on or after this date will be returned. Can provide either specific date and time(yyyy-mm-ddThh:mm) or relative time(Xn/h/d/w/m - X minutes/hours/days/weeks/months ago)." />
   <parameter name="lastModifiedTo"
      description="Companies added/edited on or before this date will be returned. Can provide either specific date and time(yyyy-mm-ddThh:mm) or relative time(Xn/h/d/w/m - X minutes/hours/days/weeks/months ago)." />
   <parameter name="isPending" description="Pending status.true - Pending Companies, false - Active Companies(default)." />
   <parameter name="search"
      description="The Search string, Companies where Name or Email contains string(e.g. testString) or does not contain(e.g. !testString) will be returned. A minimum of 3 characters are required." />
   <parameter name="searchCode"
      description="The Search string, Companies where code contains string(e.g. testString) or does not contain(e.g. !testString) will be returned. A minimum of 3 characters are required." />
   <parameter name="searchEmail"
      description="The searchEmail string, Companies where Email Address contains string(e.g. testString) or does not contain(e.g. !testString) will be returned. A minimum of 3 characters are required." />
   <parameter name="searchName"
      description="The searchName string, Companies where name contains string(e.g. testString) or does not contain(e.g. !testString) will be returned. A minimum of 3 characters are required." />
   <parameter name="tagIds"
      description="An array of tag Identifiers, Companies with at least one of the specified Tag ID/s will be returned." />
   <parameter name="type"
      description="The Company Type. Possible values:client - Client Companies, contractor - Contractor Companies, other - Other Companies, staff - Staff Companies." />
   <parameter name="pageNumber" description="The pageNumber(must be used with pagesize) to return a subset of Companies." />
   <parameter name="pageSize" description="The Page Size(must be used with pagenumber)." />
   <parameter name="sortBy"
      description="The sortBy specifies the Sort field. Possible values are id - Company ID, name - Company Name(default), code - Company Code." />
   <parameter name="sortOrder" description="The sortOrder specifies the sorting order. Possible values are asc(default) and desc." />
   <sequence>
      <property name="uri.var.fields" expression="$func:fields" />
      <property name="uri.var.apiFields" expression="$func:apiFields" />
      <property name="uri.var.apiFieldsMode" expression="$func:apiFieldsMode" />
      <property name="uri.var.divisionId" expression="$func:divisionId" />
      <property name="uri.var.idList" expression="$func:idList" />
      <property name="uri.var.idFrom" expression="$func:idFrom" />
      <property name="uri.var.idTo" expression="$func:idTo" />
      <property name="uri.var.lastModifiedFrom" expression="$func:lastModifiedFrom" />
      <property name="uri.var.lastModifiedTo" expression="$func:lastModifiedTo" />
      <property name="uri.var.isPending" expression="$func:isPending" />
      <property name="uri.var.search" expression="$func:search" />
      <property name="uri.var.searchCode" expression="$func:searchCode" />
      <property name="uri.var.searchEmail" expression="$func:searchEmail" />
      <property name="uri.var.searchName" expression="$func:searchName" />
      <property name="uri.var.tagIds" expression="$func:tagIds" />
      <property name="uri.var.type" expression="$func:type" />
      <property name="uri.var.pageNumber" expression="$func:pageNumber" />
      <property name="uri.var.pageSize" expression="$func:pageSize" />
      <property name="uri.var.sortBy" expression="$func:sortBy" />
      <property name="uri.var.sortOrder" expression="$func:sortOrder" />
      <script language="js">
         <![CDATA[
            // optional url param variables
            var fields = mc.getProperty("uri.var.fields");
            var apiFields = mc.getProperty("uri.var.apiFields");
            var apiFieldsMode = mc.getProperty("uri.var.apiFieldsMode");
            var divisionId = mc.getProperty("uri.var.divisionId");
            var idList = mc.getProperty("uri.var.idList");
            var idFrom = mc.getProperty("uri.var.idFrom");
            var idTo = mc.getProperty("uri.var.idTo");
            var lastModifiedFrom = mc.getProperty("uri.var.lastModifiedFrom");
            var lastModifiedTo = mc.getProperty("uri.var.lastModifiedTo");
            var isPending = mc.getProperty("uri.var.isPending");
            var search = mc.getProperty("uri.var.search");
            var searchCode = mc.getProperty("uri.var.searchCode");
            var searchEmail = mc.getProperty("uri.var.searchEmail");
            var searchName = mc.getProperty("uri.var.searchName");
            var tagIds = mc.getProperty("uri.var.tagIds");
            var type = mc.getProperty("uri.var.type");
            var pageNumber = mc.getProperty("uri.var.pageNumber");
            var pageSize = mc.getProperty("uri.var.pageSize");
            var sortBy = mc.getProperty("uri.var.sortBy");
            var sortOrder = mc.getProperty("uri.var.sortOrder");
            var urlQuery = '';
            if (fields != null && fields != "") {
                  urlQuery = 'fields=' + encodeURI(fields) + '&';
            }
            if (apiFields != null && apiFields != "") {
               var apiFieldsParams = '';
               var apiFieldsArray = (apiFields + '').split('||');
               for (var i = 0; i < apiFieldsArray.length; i++) {                  
                  apiFieldsParams += encodeURI(apiFieldsArray[i]) + '||';
               }
               if (apiFieldsParams != null && apiFieldsParams != "") {
                  //Remove unwanted pipe characters at the end
                  urlQuery += 'apifields=' + apiFieldsParams.substring(0, apiFieldsParams.length - 2) + '&';
               }
            }
            if (apiFieldsMode != null && apiFieldsMode != "") {
               urlQuery += 'apifieldsmode=' + encodeURIComponent(apiFieldsMode) + '&';
            }
            if (divisionId != null && divisionId != "") {
               urlQuery += 'divisionid=' + divisionId + '&';
            } 
            if (tagIds != null && tagIds != "") {
                  urlQuery += 'tagid=' + encodeURI(tagIds) + '&';
            }
            if (idFrom != null && idFrom != "") {
               urlQuery += 'idfrom=' + idFrom + '&';
            }  
            if (idTo != null && idTo != "") {
               urlQuery += 'idto=' + idTo + '&';
            }
            if (lastModifiedFrom != null && lastModifiedFrom != "") {
               urlQuery += 'lastmodifiedfrom=' + encodeURIComponent(lastModifiedFrom) + '&';
            }  
            if (lastModifiedTo != null && lastModifiedTo != "") {
               urlQuery += 'lastmodifiedto=' + encodeURIComponent(lastModifiedTo) + '&';
            }
            if (isPending != null && isPending != "") {
               urlQuery += 'pending=' + encodeURIComponent(isPending) + '&';
            }
            if (search != null && search != "") {
               urlQuery += 'search=' + encodeURIComponent(search) + '&';
            }
            if (searchCode != null && searchCode != "") {
               urlQuery += 'searchcode=' + encodeURIComponent(searchCode) + '&';
            }
            if (searchEmail != null && searchEmail != "") {
               urlQuery += 'searchemail=' + encodeURIComponent(searchEmail) + '&';
            }
            if (searchName != null && searchName != "") {
               urlQuery += 'searchname=' + encodeURIComponent(searchName) + '&';
            }
            if (type != null && type != "") {
               urlQuery += 'type=' + encodeURIComponent(type) + '&';
            }
            if (pageNumber != null && pageNumber != "") {
               urlQuery += 'pagenumber=' + pageNumber + '&';
            }  
            if (pageSize != null && pageSize != "") {
               urlQuery += 'pagesize=' + pageSize + '&';
            }
            if (sortBy != null && sortBy != "") {
               urlQuery += 'sortby=' + encodeURIComponent(sortBy) + '&';
            }
            if (sortOrder != null && sortOrder != "") {
               urlQuery += 'sortorder=' + encodeURIComponent(sortOrder) + '&';
            }
            if (idList != null && idList != "") {
                  urlQuery += 'id=' + encodeURI(idList) + '&';
            }
            if (urlQuery != '') {
               mc.setProperty("uri.var.urlQuery", '?' + urlQuery.substring(0, urlQuery.length-1));
            }
            ]]>
      </script>
      <call>
         <endpoint>
            <http method="get" uri-template="{uri.var.apiUrl}/companies{uri.var.urlQuery}" />
         </endpoint>
      </call>
      <!-- Remove response custom header information -->
      <header name="Access-Control-Allow-Origin" scope="transport" action="remove" />
      <header name="X-RateLimit-Limit" scope="transport" action="remove" />
      <header name="X-RateLimit-Remaining" scope="transport" action="remove" />
      <header name="X-RateLimit-Reset" scope="transport" action="remove" />
      <header name="Access-Control-Max-Age" scope="transport" action="remove" />
      <header name="Access-Control-Allow-Methods" scope="transport" action="remove" />
      <header name="Access-Control-Allow-Credentials" scope="transport" action="remove" />
      <header name="Allow" scope="transport" action="remove" />
      <header name="X-Powered-By" scope="transport" action="remove" />
      <header name="X-TimeTaken-Resource" scope="transport" action="remove" />
      <header name="X-TimeTaken-Total" scope="transport" action="remove" />
      <header name="Access-Control-Allow-Headers" scope="transport" action="remove" />
   </sequence>
</template>