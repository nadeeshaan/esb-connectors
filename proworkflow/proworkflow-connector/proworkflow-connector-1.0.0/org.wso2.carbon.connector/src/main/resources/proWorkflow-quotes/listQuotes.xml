<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- API Document URL https://api.proworkflow.net/?calls -->
<template name="listQuotes" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="fields"
      description="An array of api fields to be returned in the response, if not specified number, title, company, status, totals and quoteddate will be returned." />
   <parameter name="subTotals"
      description="An array of sub totals to be returned in the response, if not specified then only Fields/Totals will be returned." />
   <parameter name="subTotalsDateOption"
      description="The subTotalsDateOption specifies the date to group by when using a date option in the 'subTotals' parameter." />
   <parameter name="apiFields"
      description="The apiFields filters the response based on the API fields values. Provide an API Field ID and String separated by a comma. Multiple API Field IDs and String pairs can be provided by separating them two pipe characters. E.g. 2,Europe||3,Industrial||3,Commercial." />
   <parameter name="apiFieldsMode"
      description="The apiFieldsMode specifies the Mode used for the apiFields parameter. Possible values are 'any' and 'all'. Defaults to 'any'." />
   <parameter name="approvedDateFrom"
      description="Quotes approved on or after this date will be returned. Provide either the specific date(yyyy-mm-dd) or a relative date(- +/-Xd/w/m/y)." />
   <parameter name="approvedDateTo"
      description="Quotes approved on or before this date will be returned. Provide either the specific date(yyyy-mm-dd) or a relative date(- +/-Xd/w/m/y)." />
   <parameter name="companyIds"
      description="An array of company Identifiers, specifies the Quotes under the specified companies to be returned." />
   <parameter name="divisionId" description="The division identifier specifies the Quotes under the specific division to be returned." />
   <parameter name="grandTotal"
      description="The grandTotal specifies the quotes having the specified grandtotal values to be returned. can be a number(e.g. 300) gte number(e.g. gte300, greater than or equal to the specified value) or lte number(e.g. lte300, less than or equal to the specified value)." />
   <parameter name="idFrom" description="Quotes with ID greater than or equal to this value will be returned." />
   <parameter name="idTo" description="Quotes with ID less than or equal to this value will be returned." />
   <parameter name="lastModifiedFrom"
      description="Quotes added/edited on or after this date will be returned. Can provide either specific date and time(yyyy-mm-ddThh:mm) or relative time(Xn/h/d/w/m - X minutes/hours/days/weeks/months ago)." />
   <parameter name="lastModifiedTo" description="Quotes added/edited on or before this date will be returned." />
   <parameter name="projectIds"
      description="An array of project Identifiers, specifies the Quotes under the specified projects to be returned." />
   <parameter name="quotedDateFrom" description="Quotes created on or after this date will be returned." />
   <parameter name="quotedDateTo" description="Quotes created on or before this date will be returned." />
   <parameter name="search"
      description="The Search string, Quotes where Number or Title contains string(e.g. testString) or does not contain(e.g. !testString) will be returned. A minimum of 3 characters are required." />
   <parameter name="searchDescription"
      description="The searchDescription string, Quotes where Description contains string(e.g. testString) or does not contain(e.g. !testString) will be returned. A minimum of 3 characters are required." />
   <parameter name="searchNumber"
      description="The searchNumber string, Quotes where Number contains string(e.g. testString) or does not contain(e.g. !testString) will be returned. A minimum of 3 characters are required." />
   <parameter name="searchQuotedBy"
      description="The searchQuotedBy string, Quotes where Quoted By contains string(e.g. testString) or does not contain(e.g. !testString) will be returned. A minimum of 3 characters are required." />
   <parameter name="searchTitle"
      description="The searchTitle string, Quotes where Title contains string(e.g. testString) or does not contain(e.g. !testString) will be returned. A minimum of 3 characters are required." />
   <parameter name="status"
      description="The status specifies the Quotes under the specified status to be returned. Possible values are pending(default), approved, active, declined and all." />
   <parameter name="subTotal"
      description="The subTotal specifies the quotes having the specified subtotal values to be returned. can be a number(e.g. 300) gte number(e.g. gte300, greater than or equal to the specified value) or lte number(e.g. lte300, less than or equal to the specified value)." />
   <parameter name="taxable"
      description="The taxable specifies the Quotes having the specified Taxable status to be returned. Possible values are true, false and all(default)." />
   <parameter name="taxTotal"
      description="The taxTotal specifies the quotes having the specified taxtotal values to be returned. can be a number(e.g. 300) gte number(e.g. gte300, greater than or equal to the specified value) or lte number(e.g. lte300, less than or equal to the specified value)." />
   <parameter name="type"
      description="The type specifies the Quotes under the specified status to be returned. Possible values are pending(default), approved, active, declined and all." />
   <parameter name="validToDateFrom" description="Quotes valid to/after this date will be returned." />
   <parameter name="validToDateTo" description="Quotes valid to/before this date will be returned." />
   <parameter name="pageNumber" description="The pageNumber(must be used with pagesize) to return a subset of Quotes." />
   <parameter name="pageSize"
      description="The Page Size(must be used with pagenumber).Paging options are not available together with the 'subTotals' parameter." />
   <parameter name="sortBy" description="The sortBy specifies the Sort field. Possible values are id, number(default) and title." />
   <parameter name="sortOrder" description="The sortOrder specifies the sorting order. Possible values are asc(default) and desc." />
   <sequence>
      <property name="uri.var.fields" expression="$func:fields" />
      <property name="uri.var.subTotals" expression="$func:subTotals" />
      <property name="uri.var.subTotalsDateOption" expression="$func:subTotalsDateOption" />
      <property name="uri.var.apiFields" expression="$func:apiFields" />
      <property name="uri.var.apiFieldsMode" expression="$func:apiFieldsMode" />
      <property name="uri.var.approvedDateFrom" expression="$func:approvedDateFrom" />
      <property name="uri.var.approvedDateTo" expression="$func:approvedDateTo" />
      <property name="uri.var.companyIds" expression="$func:companyIds" />
      <property name="uri.var.divisionId" expression="$func:divisionId" />
      <property name="uri.var.grandTotal" expression="$func:grandTotal" />
      <property name="uri.var.idFrom" expression="$func:idFrom" />
      <property name="uri.var.idTo" expression="$func:idTo" />
      <property name="uri.var.lastModifiedFrom" expression="$func:lastModifiedFrom" />
      <property name="uri.var.lastModifiedTo" expression="$func:lastModifiedTo" />
      <property name="uri.var.projectIds" expression="$func:projectIds" />
      <property name="uri.var.quotedDateFrom" expression="$func:quotedDateFrom" />
      <property name="uri.var.quotedDateTo" expression="$func:quotedDateTo" />
      <property name="uri.var.search" expression="$func:search" />
      <property name="uri.var.searchDescription" expression="$func:searchDescription" />
      <property name="uri.var.searchNumber" expression="$func:searchNumber" />
      <property name="uri.var.searchQuotedBy" expression="$func:searchQuotedBy" />
      <property name="uri.var.searchTitle" expression="$func:searchTitle" />
      <property name="uri.var.status" expression="$func:status" />
      <property name="uri.var.subTotal" expression="$func:subTotal" />
      <property name="uri.var.taxable" expression="$func:taxable" />
      <property name="uri.var.taxTotal" expression="$func:taxTotal" />
      <property name="uri.var.type" expression="$func:type" />
      <property name="uri.var.validToDateFrom" expression="$func:validToDateFrom" />
      <property name="uri.var.validToDateTo" expression="$func:validToDateTo" />
      <property name="uri.var.pageNumber" expression="$func:pageNumber" />
      <property name="uri.var.pageSize" expression="$func:pageSize" />
      <property name="uri.var.sortBy" expression="$func:sortBy" />
      <property name="uri.var.sortOrder" expression="$func:sortOrder" />
      <script language="js">
         <![CDATA[
            // optional url param variables
            var fields = mc.getProperty("uri.var.fields");
            var subTotals = mc.getProperty("uri.var.subTotals");
            var subTotalsDateOption = mc.getProperty("uri.var.subTotalsDateOption");
            var apiFields = mc.getProperty("uri.var.apiFields");
            var apiFieldsMode = mc.getProperty("uri.var.apiFieldsMode");
            var approvedDateFrom = mc.getProperty("uri.var.approvedDateFrom");
            var approvedDateTo = mc.getProperty("uri.var.approvedDateTo");
            var companyIds = mc.getProperty("uri.var.companyIds");
            var divisionId = mc.getProperty("uri.var.divisionId");
            var grandTotal = mc.getProperty("uri.var.grandTotal");
            var idFrom = mc.getProperty("uri.var.idFrom");
            var idTo = mc.getProperty("uri.var.idTo");
            var lastModifiedFrom = mc.getProperty("uri.var.lastModifiedFrom");
            var lastModifiedTo = mc.getProperty("uri.var.lastModifiedTo");
            var projectIds = mc.getProperty("uri.var.projectIds");
            var quotedDateFrom = mc.getProperty("uri.var.quotedDateFrom");
            var quotedDateTo = mc.getProperty("uri.var.quotedDateTo");
            var search = mc.getProperty("uri.var.search");
            var searchDescription = mc.getProperty("uri.var.searchDescription");
            var searchNumber = mc.getProperty("uri.var.searchNumber");
            var searchQuotedBy = mc.getProperty("uri.var.searchQuotedBy");
            var searchTitle = mc.getProperty("uri.var.searchTitle");
            var status = mc.getProperty("uri.var.status");
            var subTotal = mc.getProperty("uri.var.subTotal");
            var taxable = mc.getProperty("uri.var.taxable");
            var taxTotal = mc.getProperty("uri.var.taxTotal");
            var type = mc.getProperty("uri.var.type");
            var validToDateFrom = mc.getProperty("uri.var.validToDateFrom");
            var validToDateTo = mc.getProperty("uri.var.validToDateTo");
            var pageNumber = mc.getProperty("uri.var.pageNumber");
            var pageSize = mc.getProperty("uri.var.pageSize");
            var sortBy = mc.getProperty("uri.var.sortBy");
            var sortOrder = mc.getProperty("uri.var.sortOrder");
            var urlQuery = '';    
            if (fields != null && fields != "") {
                  urlQuery = 'fields=' + encodeURI(fields) + '&';
            }
            if (subTotals != null && subTotals != "") {
                  urlQuery += 'subtotals=' + encodeURI(subTotals) + '&';
            }        
            if (subTotalsDateOption != null && subTotalsDateOption != "") {
               urlQuery += 'subtotalsdateoption=' + encodeURIComponent(subTotalsDateOption) + '&';
            }  
            if (apiFields != null && apiFields != "") {
               var apiFieldsParams = '';
               var apiFieldsArray = (apiFields + '').split('||');
               for (var i = 0; i < apiFieldsArray.length; i++) {                  
                  apiFieldsParams += encodeURI(apiFieldsArray[i]) + '||';
               }
               if (apiFieldsParams != null && apiFieldsParams != "") {
                  //Remove unwanted pipe characters at the end
                  urlQuery += 'apifields=' + apiFieldsParams.substring(0, apiFieldsParams.length - 2) + '&';
               }
            }
            if (apiFieldsMode != null && apiFieldsMode != "") {
               urlQuery += 'apifieldsmode=' + encodeURIComponent(apiFieldsMode) + '&';
            }   
            if (approvedDateFrom != null && approvedDateFrom != "") {
               urlQuery += 'approveddatefrom=' + encodeURIComponent(approvedDateFrom) + '&';
            }   
            if (approvedDateTo != null && approvedDateTo != "") {
               urlQuery += 'approveddateto=' + encodeURIComponent(approvedDateTo) + '&';
            }
            if (companyIds != null && companyIds != "") {
                  urlQuery += 'companyid=' + encodeURI(companyIds) + '&';
            }
            if (divisionId != null && divisionId != "") {
               urlQuery += 'divisionid=' + divisionId + '&';
            }  
            if (grandTotal != null && grandTotal != "") {
               urlQuery += 'grandtotal=' + encodeURIComponent(grandTotal) + '&';
            }
            if (idFrom != null && idFrom != "") {
               urlQuery += 'idfrom=' + idFrom + '&';
            }  
            if (idTo != null && idTo != "") {
               urlQuery += 'idto=' + idTo + '&';
            }  
            if (lastModifiedFrom != null && lastModifiedFrom != "") {
               urlQuery += 'lastmodifiedfrom=' + encodeURIComponent(lastModifiedFrom) + '&';
            }  
            if (lastModifiedTo != null && lastModifiedTo != "") {
               urlQuery += 'lastmodifiedto=' + encodeURIComponent(lastModifiedTo) + '&';
            }
            if (projectIds != null && projectIds != "") {
                  urlQuery += 'projectid=' + encodeURI(projectIds) + '&';
            }
            if (quotedDateFrom != null && quotedDateFrom != "") {
               urlQuery += 'quoteddatefrom=' + encodeURIComponent(quotedDateFrom) + '&';
            }  
            if (quotedDateTo != null && quotedDateTo != "") {
               urlQuery += 'quoteddateto=' + encodeURIComponent(quotedDateTo) + '&';
            }   
            if (search != null && search != "") {
               urlQuery += 'search=' + encodeURIComponent(search) + '&';
            }
            if (searchDescription != null && searchDescription != "") {
               urlQuery += 'searchdescription=' + encodeURIComponent(searchDescription) + '&';
            }  
            if (searchNumber != null && searchNumber != "") {
               urlQuery += 'searchnumber=' + encodeURIComponent(searchNumber) + '&';
            }        
            if (searchQuotedBy != null && searchQuotedBy != "") {
               urlQuery += 'searchquotedby=' + encodeURIComponent(searchQuotedBy) + '&';
            }
            if (searchTitle != null && searchTitle != "") {
               urlQuery += 'searchtitle=' + encodeURIComponent(searchTitle) + '&';
            }
            if (status != null && status != "") {
               urlQuery += 'status=' + encodeURIComponent(status) + '&';
            }
            if (subTotal != null && subTotal != "") {
               urlQuery += 'subtotal=' + encodeURIComponent(subTotal) + '&';
            }
            if (taxable != null && taxable != "") {
               urlQuery += 'taxable=' + encodeURIComponent(taxable) + '&';
            }
            if (taxTotal != null && taxTotal != "") {
               urlQuery += 'taxtotal=' + encodeURIComponent(taxTotal) + '&';
            }        
            if (type != null && type != "") {
               urlQuery += 'type=' + encodeURIComponent(type) + '&';
            }
            if (validToDateFrom != null && validToDateFrom != "") {
               urlQuery += 'validtodatefrom=' + encodeURIComponent(validToDateFrom) + '&';
            }
            if (validToDateTo != null && validToDateTo != "") {
               urlQuery += 'validtodateto=' + encodeURIComponent(validToDateTo) + '&';
            }        
            if (pageNumber != null && pageNumber != "") {
               urlQuery += 'pagenumber=' + pageNumber + '&';
            }  
            if (pageSize != null && pageSize != "") {
               urlQuery += 'pagesize=' + pageSize + '&';
            }
            if (sortBy != null && sortBy != "") {
               urlQuery += 'sortby=' + encodeURIComponent(sortBy) + '&';
            }
            if (sortOrder != null && sortOrder != "") {
               urlQuery += 'sortorder=' + encodeURIComponent(sortOrder) + '&';
            }
            if (urlQuery != '') {
               mc.setProperty("uri.var.urlQuery", '?' + urlQuery.substring(0, urlQuery.length-1));
            }        
         ]]>
      </script>
      <call>
         <endpoint>
            <http method="get" uri-template="{uri.var.apiUrl}/quotes{uri.var.urlQuery}" />
         </endpoint>
      </call>
      <!-- Remove response custom header information -->
      <header name="Access-Control-Allow-Origin" scope="transport" action="remove" />
      <header name="X-RateLimit-Limit" scope="transport" action="remove" />
      <header name="X-RateLimit-Remaining" scope="transport" action="remove" />
      <header name="X-RateLimit-Reset" scope="transport" action="remove" />
      <header name="Access-Control-Max-Age" scope="transport" action="remove" />
      <header name="Access-Control-Allow-Methods" scope="transport" action="remove" />
      <header name="Access-Control-Allow-Credentials" scope="transport" action="remove" />
      <header name="Allow" scope="transport" action="remove" />
      <header name="X-Powered-By" scope="transport" action="remove" />
      <header name="X-TimeTaken-Resource" scope="transport" action="remove" />
      <header name="X-TimeTaken-Total" scope="transport" action="remove" />
      <header name="Access-Control-Allow-Headers" scope="transport" action="remove" />
   </sequence>
</template>