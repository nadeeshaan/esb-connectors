<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- API Doc: https://apidocs.chargebee.com/docs/api/customers#create_a_customer -->
<template name="createCustomer" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="customerId" description="The id for the new customer." />
   <parameter name="firstName" description="The first name of the customer." />
   <parameter name="lastName" description="The last name of the customer." />
   <parameter name="email" description="The email of the customer." />
   <parameter name="phoneNumber" description="The phone number of the customer." />
   <parameter name="companyName" description="The company name of the customer." />
   <parameter name="autoCollection" description="The value to enable the auto collection of payments." />
   <parameter name="vatNumber" description="The VAT number of this customer." />
   <parameter name="createdFromIp" description="The IP address of the customer." />
   <parameter name="invoiceNotes" description="The Invoice Notes for the resource." />
   <parameter name="cardGateway" description="The name of the gateway the card is stored." />
   <parameter name="cardTmpToken" description="The card token returned by vaults." />
   <parameter name="cardFirstName" description="The cardholder's first name." />
   <parameter name="cardLastName" description="The cardholder's last name." />
   <parameter name="cardNumber" description="The credit card number." />
   <parameter name="cardExpiryMonth" description="The card expiry month." />
   <parameter name="cardExpiryYear" description="The card expiry year." />
   <parameter name="cardCVV" description="The card verification value." />
   <parameter name="cardBillingAddress1" description="The card billing address line 1." />
   <parameter name="cardBillingAddress2" description="The card billing address line 2" />
   <parameter name="cardBillingCity" description="The city in card billing address." />
   <parameter name="cardBillingStateCode" description="The card state code." />
   <parameter name="cardBillingState" description="The card billing state." />
   <parameter name="cardBillingZip" description="The zip code in card billing address." />
   <parameter name="cardBillingCountry" description="The card billing country code." />
   <parameter name="cardIpAddress" description="The IP address where the payment method is created or updated." />
   <parameter name="billingAddressFirstName" description="The first name in billing address." />
   <parameter name="billingAddressLastName" description="The last name in billing address." />
   <parameter name="billingAddressEmail" description="The email in billing address." />
   <parameter name="billingAddressCompanyName" description="The company name in billing address." />
   <parameter name="billingAddressPhoneNumber" description="The phone number in billing address." />
   <parameter name="billingAddressLine1" description="The billing address line 1." />
   <parameter name="billingAddressLine2" description="The billing address line 2." />
   <parameter name="billingAddressLine3" description="The billing address line 3." />
   <parameter name="billingAddressCity" description="The city in billing address." />
   <parameter name="billingAddressStateCode" description="The state code in billing address." />
   <parameter name="billingAddressState" description="The state in billing address." />
   <parameter name="billingAddressZip" description="The zip in billing address." />
   <parameter name="billingAddressCountry" description="The country in billing address." />
   <parameter name="paymentMethodType" description="The type of payment method." />
   <parameter name="paymentMethodReferenceId" description="The reference id of the related paymont method." />
   <sequence>
      <property name="uri.var.customerId" expression="$func:customerId" />
      <property name="uri.var.firstName" expression="$func:firstName" />
      <property name="uri.var.lastName" expression="$func:lastName" />
      <property name="uri.var.email" expression="$func:email" />
      <property name="uri.var.phoneNumber" expression="$func:phoneNumber" />
      <property name="uri.var.companyName" expression="$func:companyName" />
      <property name="uri.var.autoCollection" expression="$func:autoCollection" />
      <property name="uri.var.vatNumber" expression="$func:vatNumber" />
      <property name="uri.var.createdFromIp" expression="$func:createdFromIp" />
      <property name="uri.var.invoiceNotes" expression="$func:invoiceNotes" />
      <property name="uri.var.cardGateway" expression="$func:cardGateway" />
      <property name="uri.var.cardTmpToken" expression="$func:cardTmpToken" />
      <property name="uri.var.cardFirstName" expression="$func:cardFirstName" />
      <property name="uri.var.cardLastName" expression="$func:cardLastName" />
      <property name="uri.var.cardNumber" expression="$func:cardNumber" />
      <property name="uri.var.cardExpiryMonth" expression="$func:cardExpiryMonth" />
      <property name="uri.var.cardExpiryYear" expression="$func:cardExpiryYear" />
      <property name="uri.var.cardCVV" expression="$func:cardCVV" />
      <property name="uri.var.cardBillingAddress1" expression="$func:cardBillingAddress1" />
      <property name="uri.var.cardBillingAddress2" expression="$func:cardBillingAddress2" />
      <property name="uri.var.cardBillingCity" expression="$func:cardBillingCity" />
      <property name="uri.var.cardBillingStateCode" expression="$func:cardBillingStateCode" />
      <property name="uri.var.cardBillingState" expression="$func:cardBillingState" />
      <property name="uri.var.cardBillingZip" expression="$func:cardBillingZip" />
      <property name="uri.var.cardBillingCountry" expression="$func:cardBillingCountry" />
      <property name="uri.var.cardIpAddress" expression="$func:cardIpAddress" />
      <property name="uri.var.billingAddressFirstName" expression="$func:billingAddressFirstName" />
      <property name="uri.var.billingAddressLastName" expression="$func:billingAddressLastName" />
      <property name="uri.var.billingAddressEmail" expression="$func:billingAddressEmail" />
      <property name="uri.var.billingAddressCompanyName" expression="$func:billingAddressCompanyName" />
      <property name="uri.var.billingAddressPhoneNumber" expression="$func:billingAddressPhoneNumber" />
      <property name="uri.var.billingAddressLine1" expression="$func:billingAddressLine1" />
      <property name="uri.var.billingAddressLine2" expression="$func:billingAddressLine2" />
      <property name="uri.var.billingAddressLine3" expression="$func:billingAddressLine3" />
      <property name="uri.var.billingAddressCity" expression="$func:billingAddressCity" />
      <property name="uri.var.billingAddressStateCode" expression="$func:billingAddressStateCode" />
      <property name="uri.var.billingAddressState" expression="$func:billingAddressState" />
      <property name="uri.var.billingAddressZip" expression="$func:billingAddressZip" />
      <property name="uri.var.billingAddressCountry" expression="$func:billingAddressCountry" />
      <property name="uri.var.paymentMethodType" expression="$func:paymentMethodType" />
      <property name="uri.var.paymentMethodReferenceId" expression="$func:paymentMethodReferenceId" />
      <script language="js">
      <![CDATA[
         var payload = mc.getPayloadJSON();
         payload = {};            
         var customerId = mc.getProperty('uri.var.customerId');
         var firstName = mc.getProperty('uri.var.firstName');
         var lastName = mc.getProperty('uri.var.lastName');
         var email = mc.getProperty('uri.var.email');
         var phoneNumber = mc.getProperty('uri.var.phoneNumber');
         var companyName = mc.getProperty('uri.var.companyName');
         var autoCollection = mc.getProperty('uri.var.autoCollection');
         var vatNumber = mc.getProperty('uri.var.vatNumber');
         var createdFromIp = mc.getProperty('uri.var.createdFromIp');
         var invoiceNotes = mc.getProperty('uri.var.invoiceNotes');
         var cardGateway = mc.getProperty('uri.var.cardGateway');
         var cardTmpToken = mc.getProperty('uri.var.cardTmpToken');
         var cardFirstName = mc.getProperty('uri.var.cardFirstName');
         var cardLastName = mc.getProperty('uri.var.cardLastName');
         var cardNumber = mc.getProperty('uri.var.cardNumber');
         var cardExpiryMonth = mc.getProperty('uri.var.cardExpiryMonth');
         var cardExpiryYear = mc.getProperty('uri.var.cardExpiryYear');
         var cardCVV = mc.getProperty('uri.var.cardCVV');
         var cardBillingAddress1 = mc.getProperty('uri.var.cardBillingAddress1');
         var cardBillingAddress2 = mc.getProperty('uri.var.cardBillingAddress2');
         var cardBillingCity = mc.getProperty('uri.var.cardBillingCity');
         var cardBillingStateCode = mc.getProperty('uri.var.cardBillingStateCode');
         var cardBillingState = mc.getProperty('uri.var.cardBillingState');
         var cardBillingZip = mc.getProperty('uri.var.cardBillingZip');
         var cardBillingCountry = mc.getProperty('uri.var.cardBillingCountry');
         var cardIpAddress = mc.getProperty('uri.var.cardIpAddress');
         var billingAddressFirstName = mc.getProperty('uri.var.billingAddressFirstName');
         var billingAddressLastName = mc.getProperty('uri.var.billingAddressLastName');
         var billingAddressEmail = mc.getProperty('uri.var.billingAddressEmail');
         var billingAddressCompanyName = mc.getProperty('uri.var.billingAddressCompanyName');
         var billingAddressPhoneNumber = mc.getProperty('uri.var.billingAddressPhoneNumber');
         var billingAddressLine1 = mc.getProperty('uri.var.billingAddressLine1');
         var billingAddressLine2 = mc.getProperty('uri.var.billingAddressLine2');
         var billingAddressLine3 = mc.getProperty('uri.var.billingAddressLine3');
         var billingAddressCity = mc.getProperty('uri.var.billingAddressCity');
         var billingAddressStateCode = mc.getProperty('uri.var.billingAddressStateCode');
         var billingAddressState = mc.getProperty('uri.var.billingAddressState');
         var billingAddressZip = mc.getProperty('uri.var.billingAddressZip');
         var billingAddressCountry = mc.getProperty('uri.var.billingAddressCountry');
         var paymentMethodType = mc.getProperty('uri.var.paymentMethodType');
         var paymentMethodReferenceId = mc.getProperty('uri.var.paymentMethodReferenceId');
         if (customerId != null && customerId != "") {
            payload.id = customerId;
         }
         if (firstName != null && firstName != "") {
            payload.first_name = firstName;
         }
         if (lastName != null && lastName != "") {
            payload.last_name = lastName;
         }
         if (email != null && email != "") {
            payload.email = email;
         }
         if (phoneNumber != null && phoneNumber != "") {
            payload.phone = phoneNumber;
         }
         if (companyName != null && companyName != "") {
            payload.company = companyName;
         }
         if (autoCollection != null && autoCollection != "") {
            payload.auto_collection = autoCollection;
         }
         if (vatNumber != null && vatNumber != "") {
            payload.vat_number = vatNumber;
         }
         if (createdFromIp != null && createdFromIp != "") {
            payload.created_from_ip = createdFromIp;
         }
         if (invoiceNotes != null && invoiceNotes != "") {
            payload.invoice_notes = invoiceNotes;
         }
         if (cardGateway != null && cardGateway != "") {
            payload ["card[gateway]"] = cardGateway;
         }
         if (cardTmpToken != null && cardTmpToken != "") {
            payload ["card[tmp_token]"] = cardTmpToken;
         }
         if (cardFirstName != null && cardFirstName != "") {
            payload ["card[first_name]"] = cardFirstName;
         }
         if (cardLastName != null && cardLastName != "") {
            payload ["card[last_name]"] = cardLastName;
         }
         if (cardNumber != null && cardNumber != "") {
            payload ["card[number]"] = cardNumber;
         }
         if (cardExpiryMonth != null && cardExpiryMonth != "") {
            payload ["card[expiry_month]"] = cardExpiryMonth;
         }
         if (cardExpiryYear != null && cardExpiryYear != "") {
            payload ["card[expiry_year]"] = cardExpiryYear;
         }
         if (cardCVV != null && cardCVV != "") {
            payload ["card[cvv]"] = cardCVV;
         }
         if (cardBillingAddress1 != null && cardBillingAddress1 != "") {
            payload ["card[billing_addr1]"] = cardBillingAddress1;
         }
         if (cardBillingAddress2 != null && cardBillingAddress2 != "") {
            payload ["card[billing_addr2]"] = cardBillingAddress2;
         }
         if (cardBillingCity != null && cardBillingCity != "") {
            payload ["card[billing_city]"] = cardBillingCity;
         }
         if (cardBillingStateCode != null && cardBillingStateCode != "") {
            payload ["card[billing_state_code]"] = cardBillingStateCode;
         }
         if (cardBillingState != null && cardBillingState != "") {
            payload ["card[billing_state]"] = cardBillingState;
         }
         if (cardBillingZip != null && cardBillingZip != "") {
            payload ["card[billing_zip]"] = cardBillingZip;
         }
         if (cardBillingCountry != null && cardBillingCountry != "") {
            payload ["card[billing_country]"] = cardBillingCountry;
         }
         if (cardIpAddress != null && cardIpAddress != "") {
            payload ["card[ip_address]"] = cardIpAddress;
         }
         if (billingAddressFirstName != null && billingAddressFirstName != "") {
            payload ["billing_address[first_name]"] = billingAddressFirstName;
         }
         if (billingAddressLastName != null && billingAddressLastName != "") {
            payload ["billing_address[last_name]"] = billingAddressLastName;
         }
         if (billingAddressEmail != null && billingAddressEmail != "") {
            payload ["billing_address[email]"] = billingAddressEmail;
         }
         if (billingAddressCompanyName != null && billingAddressCompanyName != "") {
            payload ["billing_address[company]"] = billingAddressCompanyName;
         }
         if (billingAddressPhoneNumber != null && billingAddressPhoneNumber != "") {
            payload ["billing_address[phone]"] = billingAddressPhoneNumber;
         }
         if (billingAddressLine1 != null && billingAddressLine1 != "") {
            payload ["billing_address[line1]"] = billingAddressLine1;
         }
         if (billingAddressLine2 != null && billingAddressLine2 != "") {
            payload ["billing_address[line2]"] = billingAddressLine2;
         }
         if (billingAddressLine3 != null && billingAddressLine3 != "") {
            payload ["billing_address[line3]"] = billingAddressLine3;
         }
         if (billingAddressCity != null && billingAddressCity != "") {
            payload ["billing_address[city]"] = billingAddressCity;
         }
         if (billingAddressStateCode != null && billingAddressStateCode != "") {
            payload ["billing_address[state_code]"] = billingAddressStateCode;
         }
         if (billingAddressState != null && billingAddressState != "") {
            payload ["billing_address[state]"] = billingAddressState;
         }
         if (billingAddressZip != null && billingAddressZip != "") {
            payload ["billing_address[zip]"] = billingAddressZip;
         }
         if (billingAddressCountry != null && billingAddressCountry != "") {
            payload ["billing_address[country]"] = billingAddressCountry;
         } 
         if (paymentMethodType != null && paymentMethodType != "") {
            payload ["payment_method[type]"] = paymentMethodType;
         }
         if (paymentMethodReferenceId != null && paymentMethodReferenceId != "") {
            payload ["payment_method[reference_id]"] = paymentMethodReferenceId;
         }
         // Check whether any parameter exists in the payload.
         for(var prop in payload) {
            if (payload.hasOwnProperty(prop)) {
               mc.setProperty('uri.var.isPayloadParamsExist', "true");
               break;
            }
         }
         mc.setPayloadJSON(payload);
      ]]>
      </script>
      <filter xpath="boolean(get-property('uri.var.isPayloadParamsExist'))">
         <then>
            <property name="messageType" value="application/x-www-form-urlencoded" scope="axis2" />
         </then>
      </filter>
      <call>
         <endpoint>
            <http method="post" uri-template="{uri.var.apiUrl}/customers" />
         </endpoint>
      </call>
      <!-- Remove response custom header information -->
      <header name="WWW-Authenticate" scope="transport" action="remove" />
      <header name="Pragma" scope="transport" action="remove" />
      <header name="Vary" scope="transport" action="remove" />
      <header name="Expires" scope="transport" action="remove" />
      <header name="Cache-Control" scope="transport" action="remove" />
   </sequence>
</template>